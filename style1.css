body {
    margin: 0;
    min-height: 100vh;
    display: grid;
    place-content: center;
    grid-auto-flow: column;
    gap: 30px;
    background: #460c0c;
}

@property --a { 
    syntax: "<angle>";
    initial-value: 0deg; 
    inherits: true;
}

  @property --d { 
    syntax: "<percentage>";
    initial-value: 0%; 
    inherits: true;
}

img {
    --b: 10px; /* control the border thickness */
    --g: 10px; /* control the gap */
    
    --d: 30%;
    --a: 45deg;
    --_o:50% + (var(--d) + var(--g) + var(--b));
    --_i:50% + (var(--d) + var(--g));
    --_f:50% + (var(--d));
    clip-path: polygon(
      /*  */
      calc(var(--_o)*sin(-45deg + var(--a))) calc(var(--_o)*cos(-45deg + var(--a))),
      calc(var(--_o)*sin( 45deg + var(--a))) calc(var(--_o)*cos( 45deg + var(--a))),
      calc(var(--_o)*sin(135deg + var(--a))) calc(var(--_o)*cos(135deg + var(--a))),
      calc(var(--_o)*sin(225deg + var(--a))) calc(var(--_o)*cos(225deg + var(--a))),
      calc(var(--_o)*sin(-45deg + var(--a))) calc(var(--_o)*cos(-45deg + var(--a))),
      /*  */
      calc(var(--_i)*sin(-45deg + var(--a))) calc(var(--_i)*cos(-45deg + var(--a))),
      calc(var(--_i)*sin(225deg + var(--a))) calc(var(--_i)*cos(225deg + var(--a))),
      calc(var(--_i)*sin(135deg + var(--a))) calc(var(--_i)*cos(135deg + var(--a))),
      calc(var(--_i)*sin( 45deg + var(--a))) calc(var(--_i)*cos( 45deg + var(--a))),
      calc(var(--_i)*sin(-45deg + var(--a))) calc(var(--_i)*cos(-45deg + var(--a))),
      /*  */
      calc(var(--_f)*sin(-45deg + var(--a))) calc(var(--_f)*cos(-45deg + var(--a))),
      calc(var(--_f)*sin( 45deg + var(--a))) calc(var(--_f)*cos( 45deg + var(--a))),
      calc(var(--_f)*sin(135deg + var(--a))) calc(var(--_f)*cos(135deg + var(--a))),
      calc(var(--_f)*sin(225deg + var(--a))) calc(var(--_f)*cos(225deg + var(--a))),
      calc(var(--_f)*sin(-45deg + var(--a))) calc(var(--_f)*cos(-45deg + var(--a)))
);

    outline: 20px solid #460c0c; /* color here */
    outline-offset: 2px; /* a small value to avoid a viDsual glitch */
    cursor: pointer;
    transition: --d .3s,--a .2s .2s;
}

img:hover {
    --a: 0deg;
    --d: 71%;
    transition: --a .3s,--d .2s .2s;
}
  
  
  

.image-container {
    width: 100px;
    height: 100px;
    /* overflow: hidden; */
    /* position: relative; */
   } 

  .image {
    width: 100%;
    height: 100%;
    transition: transform 0.9s, cursor 0.9s;
  }
/* 
@keyframes spin {
    100% {
      transform: rotate(360deg);
    }
  }
  
  /* Apply the animation to the image when hovered */
 
 /* .image-container:hover img {
    animation: spin 2s linear forwards; /* Use 'forwards' to keep the final state after animation */
  /* } */
   
  /* Add this CSS in your external stylesheet (styles.css) */

.image-container {
    display: inline-block;
    position: relative;
    width: 200px; /* Adjust dimensions as needed */
    height: 200px;
    overflow: hidden;
  }
  
  .frame {
    width: 100%;
    height: 100%;
    clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
    transition: transform 1s linear; /* Apply rotation transition */
  }
  
  .image-container:hover .frame {
    transform: rotate(360deg);
  }
  
  .frame img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .image-container:hover .frame img {
    display: block; /* Display image after rotation */
    animation: fadeIn 2s linear 2s forwards; /* Fade-in after 2 seconds */
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  